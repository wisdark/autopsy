/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.discovery.ui;

import java.util.ArrayList;
import java.util.List;
import org.sleuthkit.autopsy.discovery.search.AbstractFilter;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.discovery.search.SearchData;
import org.sleuthkit.autopsy.discovery.search.SearchFiltering.ArtifactTypeFilter;
import org.sleuthkit.datamodel.BlackboardArtifact;

/**
 * Filter for selection of a specific Artifact type to limit results to.
 */
class ArtifactTypeFilterPanel extends AbstractDiscoveryFilterPanel {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form ArtifactTypeFilterPanel
     */
    ArtifactTypeFilterPanel() {
        initComponents();
        setUpArtifactTypeFilter();

    }

    /**
     * Initialize the data source filter.
     */
    private void setUpArtifactTypeFilter() {
        int count = 0;
        DefaultListModel<ArtifactTypeItem> artifactTypeModel = (DefaultListModel<ArtifactTypeItem>) artifactList.getModel();
        artifactTypeModel.removeAllElements();
        for (BlackboardArtifact.ARTIFACT_TYPE artifactType : SearchData.Type.DOMAIN.getArtifactTypes()) {
            artifactTypeModel.add(count, new ArtifactTypeItem(artifactType));
            count++;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        artifactTypeCheckbox = new javax.swing.JCheckBox();
        artifactTypeScrollPane = new javax.swing.JScrollPane();
        artifactList = new javax.swing.JList<>();

        org.openide.awt.Mnemonics.setLocalizedText(artifactTypeCheckbox, org.openide.util.NbBundle.getMessage(ArtifactTypeFilterPanel.class, "ArtifactTypeFilterPanel.artifactTypeCheckbox.text")); // NOI18N
        artifactTypeCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                artifactTypeCheckboxActionPerformed(evt);
            }
        });

        setPreferredSize(new java.awt.Dimension(27, 27));

        artifactTypeScrollPane.setPreferredSize(new java.awt.Dimension(27, 27));

        artifactList.setModel(new DefaultListModel<ArtifactTypeItem>());
        artifactList.setEnabled(false);
        artifactTypeScrollPane.setViewportView(artifactList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(artifactTypeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(artifactTypeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void artifactTypeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_artifactTypeCheckboxActionPerformed
        artifactTypeScrollPane.setEnabled(artifactTypeCheckbox.isSelected());
        artifactList.setEnabled(artifactTypeCheckbox.isSelected());
    }//GEN-LAST:event_artifactTypeCheckboxActionPerformed

    @Override
    void configurePanel(boolean selected, int[] indicesSelected) {
        artifactTypeCheckbox.setSelected(selected);
        if (artifactTypeCheckbox.isEnabled() && artifactTypeCheckbox.isSelected()) {
            artifactTypeScrollPane.setEnabled(true);
            artifactList.setEnabled(true);
            if (indicesSelected != null) {
                artifactList.setSelectedIndices(indicesSelected);
            }
        } else {
            artifactTypeScrollPane.setEnabled(false);
            artifactList.setEnabled(false);
        }
    }

    @Override
    JCheckBox getCheckbox() {
        return artifactTypeCheckbox;
    }

    @Override
    JList<?> getList() {
        return artifactList;
    }

    @Override
    JLabel getAdditionalLabel() {
        return null;
    }

    @NbBundle.Messages({"ArtifactTypeFilterPanel.selectionNeeded.text=At least one Result type must be selected."})
    @Override
    String checkForError() {
        if (artifactTypeCheckbox.isSelected() && artifactList.getSelectedValuesList().isEmpty()) {
            return Bundle.ArtifactTypeFilterPanel_selectionNeeded_text();
        }
        return "";
    }

    @Override
    AbstractFilter getFilter() {
        if (artifactTypeCheckbox.isSelected() && !artifactList.getSelectedValuesList().isEmpty()) {
            List<BlackboardArtifact.ARTIFACT_TYPE> artifactTypeList = new ArrayList<>();
            for (ArtifactTypeItem item : artifactList.getSelectedValuesList()) {
                artifactTypeList.add(item.getArtifactType());
            }
            return new ArtifactTypeFilter(artifactTypeList);
        }
        return null;
    }

    /**
     * Utility class to allow us to display the AritfactType display name
     * instead of the name.
     */
    private class ArtifactTypeItem {

        private final BlackboardArtifact.ARTIFACT_TYPE artifactType;

        /**
         * Construct a new ArtifactTypeItem.
         *
         * @param ds The artifact type being wrapped.
         */
        ArtifactTypeItem(BlackboardArtifact.ARTIFACT_TYPE artifactType) {
            this.artifactType = artifactType;
        }

        /**
         * Get the ArtifactType represented by this ArtifactTypeItem.
         *
         * @return The ArtifactType represented by this ArtifactTypeItem.
         */
        BlackboardArtifact.ARTIFACT_TYPE getArtifactType() {
            return artifactType;
        }

        @Override
        public String toString() {
            return artifactType.getDisplayName();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<ArtifactTypeItem> artifactList;
    private javax.swing.JCheckBox artifactTypeCheckbox;
    private javax.swing.JScrollPane artifactTypeScrollPane;
    // End of variables declaration//GEN-END:variables
}
