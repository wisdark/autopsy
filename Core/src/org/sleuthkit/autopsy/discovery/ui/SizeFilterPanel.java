/*
 * Autopsy
 *
 * Copyright 2020 Basis Technology Corp.
 * Contact: carrier <at> sleuthkit <dot> org
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sleuthkit.autopsy.discovery.ui;

import org.sleuthkit.autopsy.discovery.search.AbstractFilter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import org.openide.util.NbBundle;
import org.sleuthkit.autopsy.discovery.search.SearchData;
import org.sleuthkit.autopsy.discovery.search.SearchData.FileSize;
import org.sleuthkit.autopsy.discovery.search.SearchFiltering;

/**
 * Panel to allow configuration of the Size Filter.
 */
final class SizeFilterPanel extends AbstractDiscoveryFilterPanel {

    private static final long serialVersionUID = 1L;

    /**
     * Creates new form SizeFilterPanel.
     *
     * @param type The type of result being searched for.
     */
    SizeFilterPanel(SearchData.Type type) {
        initComponents();
        setUpSizeFilter(type);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sizeCheckbox = new javax.swing.JCheckBox();
        sizeScrollPane = new javax.swing.JScrollPane();
        sizeList = new javax.swing.JList<>();

        org.openide.awt.Mnemonics.setLocalizedText(sizeCheckbox, org.openide.util.NbBundle.getMessage(SizeFilterPanel.class, "SizeFilterPanel.sizeCheckbox.text")); // NOI18N
        sizeCheckbox.setMaximumSize(new java.awt.Dimension(150, 25));
        sizeCheckbox.setMinimumSize(new java.awt.Dimension(150, 25));
        sizeCheckbox.setPreferredSize(new java.awt.Dimension(150, 25));
        sizeCheckbox.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        sizeCheckbox.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
        sizeCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sizeCheckboxActionPerformed(evt);
            }
        });

        setMinimumSize(new java.awt.Dimension(250, 30));
        setName(""); // NOI18N
        setPreferredSize(new java.awt.Dimension(250, 30));

        sizeScrollPane.setPreferredSize(new java.awt.Dimension(27, 27));

        sizeList.setModel(new DefaultListModel<FileSize>());
        sizeList.setEnabled(false);
        sizeList.setMaximumSize(new java.awt.Dimension(32767, 32767));
        sizeList.setVisibleRowCount(5);
        sizeScrollPane.setViewportView(sizeList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sizeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sizeScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sizeCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sizeCheckboxActionPerformed
        sizeList.setEnabled(sizeCheckbox.isSelected());
    }//GEN-LAST:event_sizeCheckboxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox sizeCheckbox;
    private javax.swing.JList<FileSize> sizeList;
    private javax.swing.JScrollPane sizeScrollPane;
    // End of variables declaration//GEN-END:variables

    @Override
    void configurePanel(boolean selected, int[] indicesSelected) {
        sizeCheckbox.setSelected(selected);
        if (sizeCheckbox.isEnabled() && sizeCheckbox.isSelected()) {
            sizeScrollPane.setEnabled(true);
            sizeList.setEnabled(true);
            if (indicesSelected != null) {
                sizeList.setSelectedIndices(indicesSelected);
            }
        } else {
            sizeScrollPane.setEnabled(false);
            sizeList.setEnabled(false);
        }
    }

    @Override
    JCheckBox getCheckbox() {
        return sizeCheckbox;
    }

    @Override
    JLabel getAdditionalLabel() {
        return null;
    }

    /**
     * Initialize the file size filter.
     */
    private void setUpSizeFilter(SearchData.Type fileType) {
        int count = 0;
        DefaultListModel<FileSize> sizeListModel = (DefaultListModel<FileSize>) sizeList.getModel();
        sizeListModel.removeAllElements();
        if (null == fileType) {
            for (FileSize size : FileSize.values()) {
                sizeListModel.add(count, size);
            }
        } else {
            List<SearchData.FileSize> sizes;
            switch (fileType) {
                case VIDEO:
                    sizes = FileSize.getOptionsForVideos();
                    break;
                case IMAGE:
                    sizes = FileSize.getDefaultSizeOptions();
                    break;
                case DOCUMENT:
                    sizes = FileSize.getDefaultSizeOptions();
                    break;
                default:
                    sizes = new ArrayList<>();
                    break;
            }
            for (FileSize size : sizes) {
                sizeListModel.add(count, size);
            }
        }
    }

    @NbBundle.Messages({"SizeFilterPanel.error.text=At least one size must be selected."})
    @Override
    String checkForError() {
        if (sizeCheckbox.isSelected() && sizeList.getSelectedValuesList().isEmpty()) {
            return Bundle.SizeFilterPanel_error_text();
        }
        return "";

    }

    @Override
    JList<?> getList() {
        return sizeList;
    }

    @Override
    AbstractFilter getFilter() {
        if (sizeCheckbox.isSelected()) {
            return new SearchFiltering.SizeFilter(sizeList.getSelectedValuesList());
        }
        return null;
    }
}
